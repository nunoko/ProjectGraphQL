{"version":3,"sources":["img/penguein.gif","img/Logo_TRUE.webp","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","src","load","message","console","log","launches","map","key","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","link","createHttpLink","uri","cache","InMemoryCache","App","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.621644b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/penguein.d0e3ca45.gif\";","module.exports = __webpack_public_path__ + \"static/media/Logo_TRUE.a3a1ef08.webp\";","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport Moment from 'react-moment'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function LaunchItem({launch:{flight_number,mission_name,launch_date_local,launch_success}}) {\r\n   \r\n    return (\r\n        <div className=\"card card-body md-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9\">\r\n                    <h4>Mission: <span className={classNames({\r\n                        'text-success':launch_success,\r\n                        'text-danger': !launch_success\r\n                    })}>{mission_name}</span></h4>\r\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm:ss\">{launch_date_local}</Moment></p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Detail</Link>\r\n                </div>\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MissionKey() {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\"/> = Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\"/> = Fail\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\nimport LaunchItem from './LaunchItem'\r\nimport MissionKey from './MissionKey'\r\nimport load from '../img/penguein.gif'\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n   {\r\n      launches{\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_date_local\r\n            launch_success\r\n            rocket{\r\n            rocket_id\r\n            rocket_name\r\n            rocket_type\r\n            }\r\n        }\r\n  }\r\n`\r\n//rcfc\r\nexport default function Launches() {\r\n\r\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\r\n    if (loading) return <p><img src={load} /></p>;\r\n    if (error) return `Error! ${error.message}`;\r\n    {console.log(data)}\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4.my-3\">Launches</h1>\r\n            <MissionKey />\r\n            {\r\n                data.launches.map(launch=>(\r\n                    <LaunchItem key={launch.flight_number} launch={launch} />\r\n                ))\r\n            }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n","import React  from 'react'\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\nimport { Link } from 'react-router-dom'\r\nimport classNames from 'classnames'\r\nimport load from '../img/penguein.gif'\r\n\r\n\r\n\r\nconst LAUNCH_QUERY = gql`\r\n   query LaunchQuery($flight_number : Int!){\r\n      launch(flight_number: $flight_number){\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_date_local\r\n            launch_success\r\n            rocket{\r\n                rocket_id\r\n                rocket_name\r\n                rocket_type\r\n            }\r\n        }\r\n  }\r\n`\r\n\r\n//rcf\r\nexport default function Launch(props) {\r\n\r\n\r\n    let { flight_number } = props.match.params\r\n    flight_number = parseInt(flight_number)\r\n   \r\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, {\r\n        variables: { flight_number },\r\n      });\r\n    \r\n    if (loading) return <p><img src={load} /></p>;\r\n    if (error) return `Error! ${error.message}`;\r\n        console.log(data)\r\n        const {mission_name,\r\n            //flight_number,\r\n            launch_year,\r\n            launch_date_local, \r\n            launch_success,\r\n            rocket : {\r\n                rocket_id,\r\n                rocket_name,\r\n                rocket_type}\r\n            } = data.launch\r\n    return (\r\n        <div>\r\n           <h1 className = \"display-4 my-3\" ><span className=\"text-dark\">Mission : </span>{mission_name}</h1>\r\n           <h4 className=\"mb-3\">Launch Detail</h4>\r\n           <ul className=\"list-group\">\r\n               <li className=\"list-group-item\">\r\n                    Flight Number : {flight_number}\r\n               </li>\r\n               <li className=\"list-group-item\">\r\n                    Launch Year : {launch_year}\r\n               </li>\r\n               <li className=\"list-group-item\">Launch Successful :  \r\n                    <span className={classNames({\r\n                        'text-success' : launch_success,\r\n                        'text-danger' : !launch_success\r\n                    })}> {launch_success ? 'Yes' : 'No'}</span>\r\n               </li>\r\n           </ul>\r\n           <h4 className=\"my-3\">Rocket Details</h4>\r\n           <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">Rocket ID : {rocket_id}</li>\r\n                <li className=\"list-group-item\">Rocket Name : {rocket_name}</li>\r\n                <li className=\"list-group-item\">Rocket Type : {rocket_type}</li>\r\n           </ul>\r\n           <hr/>\r\n                    <Link to=\"/\" className=\"btn  btn-secondary\">Back</Link>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n","import React from 'react';\nimport { createHttpLink } from \"apollo-link-http\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\nimport './App.css';\nimport logo from './img/Logo_TRUE.webp'\n\n\nconst client = new ApolloClient({\n  link: createHttpLink({  \n    //uri: \"http://localhost:5000/graphql/\" \n    uri: \"/graphql/\" \n  }),\n  cache: new InMemoryCache()\n   \n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n      <div className=\"container\">\n        <img \n        src={logo} \n        alt=\"True logo\" \n        style={{ width:300, display: 'block' , margin:'auto'}}/>\n        <Route exact path=\"/\" component={Launches} />\n        <Route exact path=\"/launch/:flight_number\"  component={Launch} />\n      </div>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}